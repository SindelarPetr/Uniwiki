@inherits UniwikiComponentBase 
@implements IDisposable

<div class="drag-drop-zone border-secondary rounded p-4 my-3 d-flex">
	<input type="file" @ref="_fileInput" multiple />
	<i class="fas fa-cloud-upload-alt fa-2x mr-3"></i>
	<div class="d-flex flex-column">
		<span>@TextService.AddFiles</span>
		<small>@TextService.EditPost_MaxFileSize</small>
	</div>
</div>

@code {
	private ElementReference? _fileInput;

	private readonly IDictionary<string, UploadFile> _files = new Dictionary<string, UploadFile>();
	private DotNetObjectReference<InputFileCallbacks> _callbacksAsNetRef;

	[Inject] IJsInteropService JsInteropService { get; set; } = null!;

	[Parameter]
	public EventCallback<UploadFile> OnSelected { get; set; }

	private InputFileCallbacks _callbacks;

	public FileUploaderComponent()
	{
		Console.WriteLine("Constructor: FileUploaderComponent");
	}

	protected override Task OnAfterRenderAsync(bool firstRender)
	{
		base.OnAfterRender(firstRender);

		// Return if it is not the first render
		if (!firstRender)
			return Task.CompletedTask;

		Console.WriteLine("Initializing FileUploaderComponent (OnAfterRenderAsync)");

		_callbacks = new InputFileCallbacks();

		_callbacks.OnFileSelected += file =>
		{
			// Log action
			Console.WriteLine("OnFileSelected: " + file.Id + " >> " + file.Name);
			file.JsInteropService = JsInteropService;
			_files[file.Id] = file;

			return OnSelected.InvokeAsync(file);
		};

		_callbacks.OnStart += fileId =>
		{
			Console.WriteLine("OnStart: " + fileId);
			_files[fileId].SetStart();
		};

		_callbacks.OnProgress += progressInfo =>
		{
			Console.WriteLine($"OnProgress: { progressInfo.FileId } - { progressInfo.Progress }");
			_files[progressInfo.FileId].SetProgress(progressInfo.Progress);
		};

		_callbacks.OnError += fileId =>
		{
			Console.WriteLine($"OnError: { fileId }");
			_files[fileId].SetError();
		};

		_callbacks.OnAbort += fileId =>
		{
			Console.WriteLine($"OnAbort: { fileId }");
			_files[fileId].SetAbort();
		};

		_callbacks.OnSuccess += successInfo =>
		{
			Console.WriteLine($"OnSuccess: { successInfo.DataForClient }");
			_files[successInfo.FileId].SetSuccess(successInfo.DataForClient);
		};

		_callbacksAsNetRef = DotNetObjectReference.Create(_callbacks);

		// Register the callbacks
		return JsInteropService.MyInputInit(_fileInput, _callbacksAsNetRef).AsTask();
	}

	public void Dispose()
	{
		_callbacksAsNetRef?.Dispose();
	}

}
