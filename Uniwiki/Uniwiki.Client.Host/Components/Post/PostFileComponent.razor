@using System.IO
@inherits UniwikiComponentBase

@if (IsEditable)
{
	<EditForm class="mb-2" EditContext="_editContext">
		<MyFluentValidator></MyFluentValidator>
		<div class="d-flex">

			<div class="input-group">
				<OnInputTextComponent class="form-control d-flex btn-block text-left" type="text" @bind-Value="File.NameWithoutExtension" maxlength="@Constants.Validations.FileNameMaxLength" name="@File.Id" />
				<div class="input-group-append">
					<span class="input-group-text" id="basic-addon2">@File.Extension</span>
				</div>
			</div>

			<button class="btn btn-danger ml-2" type="button" @onclick="HandleRemoveFile">
				<i class="fas fa-trash"></i>
			</button>
			<button class="btn btn-secondary ml-2 @(PeriodicalTimer.IsRunning ? "disabled" : string.Empty)" type="button" @onclick="HandleDownload">
				@if (PeriodicalTimer.IsRunning)
				{
					<div>
						<span>@PeriodicalTimer.PeriodsLeft&nbsp;s</span>
					</div>
				}
				else
				{
					<div>
						<i class="fas fa-download"></i>
					</div>
				}
			</button>
		</div>
			@if (File.NameWithoutExtension != _originalNameWithoutExtension)
			{
				<div class="d-flex mb-4 mt-1">
					<ValidationMessage style="margin-right: 10px" class="mr-3" For="@(() => File.NameWithoutExtension)" />
					<span>@TextService.OriginalFileName <a class="m-0 p-0 text-primary dont-break-out" type="button" @onclick="HandleRevertName">@_originalNameWithoutExtension</a></span>
				</div>
			}
</EditForm>
}
else
{
	<button class="btn btn-secondary d-flex btn-block mb-2 @(PeriodicalTimer.IsRunning ? "disabled" : string.Empty)" type="button" @onclick="HandleDownload">
		<span class="mr-2 dont-break-out">@File.NameWithoutExtension</span>
		@if (PeriodicalTimer.IsRunning)
		{
			<span class="mr-2">(@PeriodicalTimer.PeriodsLeft s)</span>
		}
		<span class="ml-auto">@TextService.FileSize(File.Size)</span>
	</button>
}

@code {
	[Inject] ILoginService LoginService { get; set; }
	[Inject] IJsInteropService JsInteropService { get; set; }
	[Inject] IPeriodicalTimer PeriodicalTimer { get; set; }
	[Inject] IJSRuntime JsRuntime { get; set; }
	[Inject] IModalService ModalService { get; set; }
	[Inject] INavigationService NavigationService { get; set; }

	[Parameter] public PostFileDto File { get; set; }

	[Parameter] public Func<PostFileDto, Task>? OnRemove { get; set; }

	private bool IsEditable => OnRemove != null;

	private string? _originalNameWithoutExtension;

	private EditContext _editContext;

	protected override void OnParametersSet()
	{
		base.OnParametersSet();

		_editContext = new EditContext(File);

		// Preserve the original file name
		if(_originalNameWithoutExtension == null)
			_originalNameWithoutExtension = File.NameWithoutExtension;
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);
	}

	private bool IsValidFileName(string name)
	{
		return name.All(c => !Path.GetInvalidFileNameChars().Contains(c));
	}

	private async Task HandleDownload()
	{
		if (PeriodicalTimer.PeriodsLeft > 0 || !LoginService.IsAuthenticated)
		{
			return;
		}

		PeriodicalTimer.Start(TimeSpan.FromSeconds(1), Constants.DownloadAgainTime.Seconds, HandleTimerTick);

		var url = ApiRoutes.FileController.GetPostFile(File.Id, LoginService.LoginToken.SecondaryTokenId, File.OriginalFullName, TextService.Language);

		NavigationService.NavigateTo(url, true);
	}

	private void HandleTimerTick()
	{
		StateHasChanged();
	}

	private async Task HandleRemoveFile()
	{
		// Ask if user is sure
		if (await ModalService.Confirm(TextService.Modal_ConfirmPostFileRemoval(File.OriginalFullName)))
			await OnRemove(File);
	}

	private async Task HandleRevertName()
	{
		File.NameWithoutExtension = _originalNameWithoutExtension;
		_editContext.Validate();
	}
}