@inherits UniwikiComponentBase

@foreach (var postType in PostTypes)
{
	<button class="btn mr-2 mt-2 @(_buttonSelectedPostType == postType ? "btn-primary" : "btn-secondary")" type="button" @onclick="@(() => HandleButtonPostType(postType))">@postType</button>
}

<div class="form-inline mr-2 mt-2">
	<div class="input-group">
		<input class="form-control border-secondary @(InputSelected ? "bg-primary text-white" : string.Empty) selection-text" type="text" maxlength="@Constants.Validations.PostTypeMaxLength" placeholder="@TextService.CoursePage_SearchType" @oninput="HandleInputPostType" value="@_inputSelectedPostType" @onfocus="HandleInputOnFocus">
		<div class="input-group-append">
			<button class="btn btn-@(InputSelected ? "primary" : "secondary") @(string.IsNullOrWhiteSpace(_inputSelectedPostType) ? "disabled" : string.Empty)" type="button" @onclick="HandleClearInput"><i class="fas fa-times"></i></button>
		</div>
	</div>
</div>

@code {
	[Parameter] public string[] PostTypes { get; set; }
	[Parameter] public string? SelectedPostType { get; set; }
	[Parameter] public EventCallback<string?> SelectedPostTypeChanged { get; set; }

	private string? _buttonSelectedPostType;
	private string? _inputSelectedPostType;

	private bool InputSelected => !string.IsNullOrWhiteSpace(_inputSelectedPostType) && string.IsNullOrWhiteSpace(_buttonSelectedPostType);

	protected override void OnParametersSet()
	{
		base.OnParametersSet();

		if (PostTypes.Contains(SelectedPostType))
			_buttonSelectedPostType = SelectedPostType;
		else
			_inputSelectedPostType = SelectedPostType;
	}

	private async Task HandleButtonPostType(string postType)
	{
		// If it is already selected, then unselect it
		if (_buttonSelectedPostType == postType)
		{
			// Unselect post type
			_buttonSelectedPostType = null;
			// _inputSelectedPostType = null;

			// Notify about the change
			await SelectedPostTypeChanged.InvokeAsync(null);
		}
		else
		{
			// Select post type
			_buttonSelectedPostType = postType;
			// _inputSelectedPostType = null;

			// Notify about the change
			await SelectedPostTypeChanged.InvokeAsync(postType);
		}

	}

	private async Task HandleInputPostType(ChangeEventArgs args)
	{
		// Get the selected post type
		var postType = (string)args.Value;

		// Remove any selected
		_buttonSelectedPostType = null;
		_inputSelectedPostType = postType;

		// Notify about the change
		await SelectedPostTypeChanged.InvokeAsync(postType);
	}

	private async Task HandleInputOnFocus()
	{
		// If there is some text in the input field, we set the post type to that text.
		if (!String.IsNullOrWhiteSpace(_inputSelectedPostType))
		{
			// Unselect the button
			_buttonSelectedPostType = null;

			// Notify about the change
			await SelectedPostTypeChanged.InvokeAsync(_inputSelectedPostType);
		}
	}

	private Task HandleClearInput()
	{
		// If the value in the input is empty, dont do anything
		if (string.IsNullOrWhiteSpace(_inputSelectedPostType))
			return Task.CompletedTask;

		// Remove the text
		_inputSelectedPostType = null;

		// If there is no selected button
		if (string.IsNullOrWhiteSpace(_buttonSelectedPostType))
		{
			// then notify the change
			return SelectedPostTypeChanged.InvokeAsync(_inputSelectedPostType);
		}

		return Task.CompletedTask;
	}
}
