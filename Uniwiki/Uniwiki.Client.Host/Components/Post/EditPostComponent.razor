@inherits UniwikiComponentBase
@using global::Shared.Dtos
@using Uniwiki.Shared.RequestResponse
@using Newtonsoft.Json

@* Post Category *@
<div class="d-flex flex-wrap mb-3">
	<h5 class="my-auto pt-2 pr-3">
		@TextService.CoursePage_PostType
	</h5>

	<SelectPostTypeComponent PostTypes="@AllPostTypes" @bind-SelectedPostType="Request.PostType" />
</div>
@* /Post Category *@

<p class="lead">
	<h5>@TextService.Message</h5>
	
	<EditPostTextareaComponent OnChange="@((text) => Request.Text = text)" Text="@Request.Text" />
</p>

<h5>@TextService.Files</h5>

@* Files *@
@foreach (var file in Request.PostFiles)
{
	<PostFileComponent File="file" OnRemove="HandleRemove" @key="file.Id" />
}
@* /Files *@
@* Uploading files *@
@foreach (var file in _fileUploads)
{
	<div class="mt-3 p-3 rounded border border-@(file.Failed? "danger" : "0")" style="background:#eee" @key="@file.Id">
		<div class="d-flex mb-2 text-secondary">
			<div class="text-wrap dont-break-out">@file.Name</div>
			<div class="btn-group dropleft mb-auto ml-auto">
				<button class="btn pl-3 pr-0 no-outline" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
					<i class="fas fa-ellipsis-v ml-auto text-secondary"></i>
				</button>
				<div class="dropdown-menu">
					<button class="dropdown-item" type="button" @onclick="@(async () => await Abort(file))">Abort</button>
				</div>
			</div>

		</div>
		<div>
			<div class="progress my-2 bg-white">
				<div class="progress-bar progress-bar-striped @(!file.Finished ? "progress-bar-animated" : string.Empty) bg-@(file.Failed ? "danger" : file.Finished ? "success" : "primary")" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="@((file.Progress*100).ToString("F0"))" style="width: @((file.Progress*100).ToString("F0"))%"></div>
			</div>
		</div>
		<div class="d-flex">
			<small class="text-muted">@(file.Failed? "ERROR" : file.Finished ? "COMPLETED" : $"{(file.Progress*100).ToString("F0")}% out of {TextService.FileSize(file.Size)}")</small>
			@if (file.Failed)
			{
				<button class="btn btn-danger ml-auto" @onclick="@(async () => await FileUploadQueueService.Upload(file, CourseId))"><i class="fas fa-redo-alt mr-2"></i>Try again</button>
			}
		</div>
	</div>
}
@* /Uploading files *@

<FileUploaderComponent OnSelected="HandleOnSelect" @key="Request.PostId" />

<div class="d-flex mt-3">
	@if (PostToEdit != null)
	{
		<button class="btn btn-secondary" type="button" @onclick="HandleCancel">
			@TextService.Cancel
		</button>
	}
	<div class="ml-auto">
		<span class="mr-3 @(_fileUploads.Any(f => f.Failed) ? "text-danger" : "text-secondary")">@FilesValidationMessage</span>
		<button class="btn btn-primary" type="button" @onclick="HandleCommitPost" disabled="@_fileUploads.Any()">
			@(PostToEdit == null ? TextService.CoursePage_AddPost : TextService.EditPost_EditPost)
			@if (_committingPost)
			{
				<span class="spinner-border spinner-border-sm ml-2" role="status" aria-hidden="true"></span>
			}
		</button>
	</div>
</div>

@code {

	[Inject] ILoginService LoginService { get; set; } = null!;
	[Inject] IToastService ToastService { get; set; } = null!;
	[Inject] IFileUploadQueueService FileUploadQueueService { get; set; } = null!;

	[Parameter] public Func<EditPostRequestDto, Task> OnCommitPost { get; set; } = null!;
	[Parameter] public EventCallback OnCancel { get; set; }

	[Parameter] public Guid CourseId { get; set; }
	[Parameter] public string[] AllPostTypes { get; set; } = null!;
	[Parameter] public PostViewModel? PostToEdit { get; set; } 

	private string? SelectedPostType { get; set; }

	private bool _committingPost;

	List<UploadFile> _fileUploads = new List<UploadFile>();

	public EditPostRequestDto Request { get; set; }
		= new EditPostRequestDto(Guid.Empty, string.Empty, null, new PostFileDto[0]);

	private string FilesValidationMessage => !_fileUploads.Any() ? string.Empty : _fileUploads.Any(f => f.Failed) ? TextService.EditPost_HasFailedFile : TextService.EditPost_UploadingFiles(_fileUploads.Count);

	public EditPostComponent()
	{
		Console.WriteLine("Constructor: EditPostComponent");
	}

	protected override void OnAfterRender(bool firstRender)
	{
		Console.WriteLine("OnAfterRender: EditPostComponent (firstRender: " + firstRender + ")");
		base.OnAfterRender(firstRender);
	}

	private async Task HandleCommitPost()
	{
		if (_committingPost)
		{
			return;
		}

		if (_fileUploads.Any())
		{
			ToastService.ShowError(TextService.Toast_WaitForAllFiles);
		}

		if (String.IsNullOrWhiteSpace(Request.Text))
		{
			ToastService.ShowError(TextService.Toast_FillInATextForThePost);
			return;
		}

		_committingPost = true;
		StateHasChanged();

		try
		{
			await OnCommitPost(Request);
			ResetRequest();
		}
		finally
		{
			_committingPost = false;
			StateHasChanged();
		}
	}

	protected override void OnParametersSet()
	{
		base.OnParametersSet();
		ResetRequest();
	}

	private void ResetRequest()
	{
		var refreshedRequest = PostToEdit == null
			? new EditPostRequestDto(Guid.Empty, string.Empty, null, new PostFileDto[0])
			: new EditPostRequestDto(PostToEdit.Id, PostToEdit.Text, PostToEdit.PostType, PostToEdit.Files);

		refreshedRequest.CopyPropertiesTo(Request);
	}

	public async Task HandleOnSelect(UploadFile uploadFile)
	{
		// Of the file is not unique, then dont take it
		if (_fileUploads.Any(f => f.Name == uploadFile.Name && f.Type == uploadFile.Type && f.Size == uploadFile.Size && f.LastModified == uploadFile.LastModified)
		|| Request.PostFiles.Any(f => f.OriginalFullName == uploadFile.Name && f.Size == uploadFile.Size))
		{
			ToastService.ShowInfo(TextService.EditPost_FileAlreadySelected(uploadFile.Name), TextService.Toast_Info);
			return;
		}

		if (uploadFile.Size > Constants.MaxFileSizeInBytes)
		{
			ToastService.ShowWarning(TextService.EditPost_FileTooBig(uploadFile.Name, uploadFile.Size), TextService.Toast_Warning);
			return;
		}

		_fileUploads.Add(uploadFile);

		uploadFile.OnStart += () =>
		{
			StateHasChanged();
		};

		uploadFile.OnProgress += progress =>
		{
			StateHasChanged();
		};

		uploadFile.OnFailed += () =>
		{
			StateHasChanged();
		};

		uploadFile.OnSuccess += (dataForClient) =>
		{
			try
			{
				var response = JsonConvert.DeserializeObject<DataForClient<UploadPostFileResponseDto>>(dataForClient);

				if (response?.Response?.PostFile == null || response.Error != null)
					throw new RequestException("Could not upload file: " + uploadFile.Name + "\nGot text: " + dataForClient);

				// Save the file to post files
				Request.PostFiles.Add(response.Response.PostFile);
				_fileUploads.Remove(uploadFile);

				StateHasChanged();
			}
			catch (Exception e)
			{
				Console.WriteLine(e.Message);
				throw;
			}
		};

		StateHasChanged();

		try
		{
			await FileUploadQueueService.Upload(uploadFile, CourseId);
		}
		catch (Exception e)
		{
			Console.WriteLine(e);
			throw;
		}
	}

	public async ValueTask Abort(UploadFile uploadFile)
	{
		try
		{
			await uploadFile.Abort();
			_fileUploads.Remove(uploadFile);
		}
		catch (Exception e)
		{
			Console.WriteLine(e);
			throw;
		}
	}

	public Task HandleRemove(PostFileDto file)
	{
		Request.PostFiles.Remove(file);

		StateHasChanged();

		return Task.CompletedTask;
	}

	public Task HandleCancel()
	{
		return OnCancel.InvokeAsync(null);
	}
}
