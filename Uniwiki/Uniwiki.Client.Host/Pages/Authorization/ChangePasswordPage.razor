@page "/ChangePassword"
@using Uniwiki.Shared.RequestResponse.Authentication
@inherits Uniwiki.Client.Host.Shared.UniwikiComponentBase

<div class="container my-5">
	<div class="mx-auto card shadow-lg" style="max-width: 25rem;">
		<div class="card-header h2 py-4 d-flex">
			<BackButtonComponent /> <span class="mx-auto">@TextService.ChangePasswordPage_Title</span><span class="mr-5"></span>
		</div>
		<div class="card-body p-3 d-flex flex-column">
			<EditForm Model="@Request" OnValidSubmit="@ChangePassword">
				<MyFluentValidator></MyFluentValidator>
				<label for="inputOldPassword">@TextService.ChangePasswordPage_OldPassword</label>
				<InputText class="form-control" id="inputOldPassword" type="password" placeholder="@TextService.ChangePasswordPage_OldPassword" @bind-Value="Request.OldPassword" />
				<ValidationMessage For="@(() => Request.OldPassword)" />
				<label class="mt-3" for="inputPassword">@TextService.ChangePasswordPage_NewPassword</label>
				<InputText class="form-control" id="inputPassword" type="password" placeholder="@TextService.ChangePasswordPage_NewPassword" @bind-Value="Request.NewPassword" />
				<ValidationMessage For="@(() => Request.NewPassword)" />
				<label class="mt-3" for="inputPasswordAgain">@TextService.ChangePasswordPage_NewPasswordAgain</label>
				<InputText class="form-control" id="inputPasswordAgain" type="password" placeholder="@TextService.ChangePasswordPage_NewPasswordAgain" @bind-Value="Request.NewPasswordAgain" />
				<ValidationMessage For="@(() => Request.NewPasswordAgain)" />
				<BusyButtonComponent IsBusy="@_isBusy" Class="mt-3">
					<span>@TextService.ChangePasswordPage_ChangePassword</span>
				</BusyButtonComponent>
			</EditForm>
		</div>
	</div>
</div>

@code {

	[Inject] private IRequestSender RequestSender { get; set; }
	[Inject] private INavigationService NavigationService { get; set; }
	[Inject] private ILoginService LoginService { get; set; }

	public ChangePasswordRequestDto Request { get; set; }

	private bool _isBusy;

	public ChangePasswordPage()
	{
		Request = new ChangePasswordRequestDto(string.Empty, string.Empty, string.Empty);
	}

	protected override void OnInitialized()
	{
		base.OnInitialized();

		if (!LoginService.IsAuthenticated)
			NavigationService.NavigateTo(PageRoutes.LoginPage.BuildRoute());
	}

	public async Task ChangePassword()
	{
		if(_isBusy)
			return;

		_isBusy = true;

		await RequestSender.SendRequestAsync(Request, () =>
		{
			_isBusy = false;
			StateHasChanged();
		});
		NavigationService.NavigateTo(PageRoutes.PasswordChangedPage.BuildRoute());
	}

}