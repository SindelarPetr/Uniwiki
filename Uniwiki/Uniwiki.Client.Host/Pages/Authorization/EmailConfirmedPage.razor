@page "/EmailConfirmed/{Secret}"
@inherits UniwikiComponentBase
@using Uniwiki.Shared.RequestResponse.Authentication


<div class="container my-5">
	<div class="mx-auto card text-center shadow-lg" style="max-width: 25rem;">
		<div class="card-header h2 py-4">
			@if (_confirming)
			{
				@TextService.EmailConfirmedPage_TitleConfirming
			}
			else
			{
				if (_success)
				{
					@TextService.EmailConfirmedPage_TitleConfirmingSuccess
				}
				else
				{
					@TextService.EmailConfirmedPage_TitleConfirmingFail
				}
			}
		</div>

		<div class="card-body text-center p-3 d-flex flex-column">
			@if (_confirming) // Progress
			{
				<div>
					<span class="spinner-border my-5 mx-auto" role="status" style="width: 3rem; height: 3rem;" aria-hidden="true"></span>
				</div>
				<p>@TextService.EmailConfirmedPage_ConfirmingEmail <strong>@Email</strong>.</p>
			}
			else
			{
				@if (_success) // Success
				{
		<div>
			<i class="fas fa-check text-success fa-5x my-4 mx-auto"></i>
			<p>@TextService.EmailConfirmedPage_SuccessMessage <strong>@Email</strong>.</p>

			@if (LoginService.IsAuthenticated)
			{
				<a class="btn btn-primary btn-block" href="@PageRoutes.HomePage.BuildRoute()">@TextService.GoToUniwiki</a>
			}
			else
			{
				<a class="btn btn-primary btn-block" href="@PageRoutes.LoginPage.BuildRoute()">@TextService.LogIn</a>
			}
		</div>
				}
				else // Fail
				{
					<div>
						<i class="fas fa-times text-danger fa-5x my-4 mx-auto"></i>
						<p>@TextService.EmailConfirmedPage_FailMessage <strong>@Email</strong>.</p>
						<button class="btn btn-primary btn-block" type="button" @onclick="ConfirmEmail">@TextService.EmailConfirmedPage_TryAgain</button>
					</div>
				}
			}
		</div>
	</div>
</div>
@code
{

	[Inject] IRequestSender RequestSender { get; set; } = null!;
	[Inject] ILoginService LoginService { get; set; } = null!;
	[Inject] LocalLoginService LocalLoginService { get; set; } = null!;
	[Inject] INavigationService NavigationService { get; set; } = null!;
	[Inject] IToastService ToastService { get; set; } = null!;

	[Parameter] public string Secret { get; set; } = null!;
	[Parameter] public string Email { get; set; } = null!;

	private bool _confirming = false;
	private bool _success = false;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		// Redirect if not authenticated
		if (LoginService.IsAuthenticated)
		{
			NavigationService.NavigateTo(PageRoutes.HomePage.BuildRoute());
			return;
		}

		// Get email from url
		Email = PageRoutes.EmailConfirmedPage.TryGetEmail(NavigationService.CurrentUrl) ?? string.Empty;

		await ConfirmEmail();

	}

	internal async Task ConfirmEmail()
	{
		try
		{
			_confirming = true;
			StateHasChanged();

			// Prepare secret
			if (!Guid.TryParse(Secret, out var secretGuid))
			{
				ToastService.ShowError(TextService.Error_UnableToResolveSecret, TextService.Toast_Error);
				return;
			}

			// Create request
			var request = new ConfirmEmailRequestDto(secretGuid);

			// Send request
			var response = await RequestSender.SendRequestAsync(request, () => { });

			Email = response.AuthorizedUser.Email!;
			_success = true;

			// If the response contains the login token, then save it
			if(response.LoginToken != null)
				await LocalLoginService.LocalLogin(response.AuthorizedUser, response.LoginToken);
		}
		catch (Exception)
		{
			_success = false;
			throw;
		}
		finally
		{
			_confirming = false;
			StateHasChanged();
		}
	}


}