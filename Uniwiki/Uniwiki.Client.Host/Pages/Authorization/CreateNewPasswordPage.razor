@page "/CreateNewPassword/{Secret}"
@using Uniwiki.Shared.RequestResponse.Authentication
@inherits Uniwiki.Client.Host.Shared.UniwikiComponentBase


<div class="container my-5">
	<div class="mx-auto card text-center shadow-lg" style="max-width: 25rem;">
		<div class="card-header h2 py-4 d-flex">
			<BackButtonComponent /> <span class="mx-auto">@TextService.CreateNewPasswordPage_Title</span><span class="mr-5"></span>
		</div>
		<div class="card-body text-center p-3 d-flex flex-column">
			<EditForm Model="@Request" OnValidSubmit="@CreateNewPassword">
				<MyFluentValidator></MyFluentValidator>
				<label class="mt-3" for="inputNewPassword">@TextService.CreateNewPasswordPage_NewPassword</label>
				<InputText id="inputNewPassword" class="form-control" type="password" placeholder="@TextService.CreateNewPasswordPage_NewPassword" @bind-Value="Request.NewPassword" />
				<ValidationMessage For="@(() => Request.NewPassword)" />
				<label class="mt-3" for="inputNewPasswordAgain">@TextService.CreateNewPasswordPage_NewPasswordAgain</label>
				<InputText id="inputNewPasswordAgain" class="form-control" type="password" placeholder="@TextService.CreateNewPasswordPage_NewPasswordAgain" @bind-Value="Request.NewPasswordAgain" />
				<ValidationMessage For="@(() => Request.NewPasswordAgain)" />
				<BusyButtonComponent IsBusy="@_isBusy" Class="mt-3">
					<span>@TextService.CreateNewPasswordPage_SetPassword</span>
				</BusyButtonComponent>
			</EditForm>
		</div>
	</div>
</div>

@code {

	[Inject] private IRequestSender RequestSender { get; set; }
	[Inject] private INavigationService NavigationService { get; set; }
	[Inject] public ILoginService LoginService { get; set; }
	[Inject] public IToastService ToastService { get; set; }

	[Parameter] public string Secret { get; set; }

	public CreateNewPasswordRequestDto Request { get; private set; }

	private bool _isBusy;

	public CreateNewPasswordPage()
	{
		Request = new CreateNewPasswordRequestDto(string.Empty, Guid.Empty, string.Empty);
	}

	protected override void OnInitialized()
	{
		base.OnInitialized();

		if (!LoginService.IsAuthenticated)
			NavigationService.NavigateTo(PageRoutes.LoginPage.BuildRoute());
	}

	public async Task CreateNewPassword()
	{
		if (_isBusy)
			return;

		_isBusy = true;

		// Parse secret
		if (!Guid.TryParse(Secret, out var secretGuid))
		{
			ToastService.ShowError(TextService.Error_UnableToResolveSecret);
			return;
		}

		Request.Secret = secretGuid;
		await RequestSender.SendRequestAsync(Request, () =>
		{
			_isBusy = false;
			StateHasChanged();
		});
		NavigationService.NavigateTo(PageRoutes.PasswordChangedPage.BuildRoute());
	}


}
