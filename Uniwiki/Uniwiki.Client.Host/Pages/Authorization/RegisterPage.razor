@page "/register"
@using Uniwiki.Client.Host.Services
@using Uniwiki.Shared.RequestResponse.Authentication
@layout ThinFormLayout
@inherits Uniwiki.Client.Host.Shared.UniwikiComponentBase


<div class="card-header h2 py-4 d-flex">
	<BackButtonComponent /> <span class="mx-auto">@TextService.RegisterPage_Title</span><span class="mr-5"></span>
</div>
<div class="card-body text-left p-3">

	@*<button class="btn btn-dark btn-block d-flex mb-3">
			<span class="fab fa-google mr-3 text-white" style="font-size: 1.6rem"></span>
			<span class="text-center w-100">@TextService.ViaGoogle</span>
		</button>


		<button class="btn btn-primary btn-block d-flex" style="background-color: #4267B2">
			<span class="fab fa-facebook-f mr-3" style="font-size: 1.6rem"></span>
			<span class="text-center w-100">@TextService.ViaFacebook</span>
		</button>

		<hr class="my-3" />*@

	<EditForm Model="@Request" OnValidSubmit="@Register">
		<MyFluentValidator></MyFluentValidator>

		@* Name and Surname *@
		<label class="mt-3" for="inputName"><i class="fas fa-user"></i> @TextService.RegisterPage_NameAndSurname</label>
		<OnInputTextComponent class="form-control" type="text" id="inputName" placeholder="@TextService.RegisterPage_NameAndSurname" aria-describedby="inputGroupPrepend" @bind-Value="Request.NameAndSurname" maxlength="@Constants.Validations.UserNameAndSurnameMaxLength" name="nameAndSurname" />
		<ValidationMessage For="@(() => Request.NameAndSurname)" />
		@* /Name and Surname *@

		@* Faculty *@
		<label class="mt-3" for="inputFaculty"><i class="fas fa-university"></i> @TextService.WhereDoYouStudy <small>@TextService.RegisterPage_YouCanChangeItOnProfile</small></label>
		<div class="d-flex">
			<button class="btn btn-secondary btn-block flex-grow-1" type="button" id="inputFaculty" @onclick="HandleSelectFaulty">@(SelectedFaculty == null ? TextService.SelectUniversityAndFaculty : SelectedFaculty.University.ShortName + "-" + SelectedFaculty.LongName)</button>
			@if (SelectedFaculty != null)
			{
				<button class="btn btn-secondary ml-2" type="button" @onclick="HandleResetSelectedFaculty"><i class="fas fa-times"></i></button>
			}
		</div>
		@* /Faculty *@

		@* Email *@
		<label class="mt-3" for="inputEmail"><strong>@@</strong> @TextService.Email</label>
		<OnInputTextComponent type="email" class="@IsValidClassAttribute" id="inputEmail" placeholder="@TextService.Email" aria-describedby="inputGroupPrepend" @bind-Value="Request.Email" name="email" />
		<ValidationMessage For="@(() => Request.Email)" />
		@* /Email *@

		@* Password *@
		<label class="mt-3" for="inputPassword"><i class="fas fa-key"></i> @TextService.Password</label>
		<PasswordVisibilityComponent PasswordVisibilityUtility="_passwordVisibilityUtility1">
			<OnInputTextComponent type="@_passwordVisibilityUtility1.InputType" class="form-control" id="inputPassword" placeholder="@TextService.Password" aria-describedby="inputGroupPrepend" @bind-Value="Request.Password" name="password" />
		</PasswordVisibilityComponent>
		<ValidationMessage For="@(() => Request.Password)" />
		@* /Password *@

		@* Confirm password *@
		<label class="mt-3" for="inputPasswordAgain"><i class="fas fa-key"></i> @TextService.PasswordAgain</label>
		<PasswordVisibilityComponent PasswordVisibilityUtility="_passwordVisibilityUtility2">
			<OnInputTextComponent type="@_passwordVisibilityUtility2.InputType" class="form-control" id="inputPasswordAgain" placeholder="@TextService.PasswordAgain" aria-describedby="inputGroupPrepend" @bind-Value="Request.PasswordAgain" name="password" />
		</PasswordVisibilityComponent>
		<ValidationMessage For="@(() => Request.PasswordAgain)" />
		@* /Confirm password *@

		@* Terms of use *@
		<div class="custom-control custom-checkbox mt-3">
			<InputCheckbox type="checkbox" class="custom-control-input" id="checkbox-terms-of-use" @bind-Value="Request.AgreeToTermsOfUse" />
			<label class="custom-control-label" for="checkbox-terms-of-use">@TextService.RegisterPage_AgreeOn </label>
			<a href="@PageRoutes.TermsOfUsePage.BuildRoute()" target="_blank">@TextService.RegisterPage_TermsOfUse</a>
			<ValidationMessage For="@(() => Request.AgreeToTermsOfUse)" />
		</div>
		@* /Terms of use *@

		@* Submit *@
		<BusyButtonComponent IsBusy="@_isBusy" Class="mt-3">
			<span>@TextService.RegisterPage_Create</span>
		</BusyButtonComponent>
		@* /Submit *@
	</EditForm>
</div>
<div class="card-footer text-muted">
	<div>
		<a class="btn btn-link" href="@PageRoutes.LoginPage.BuildRoute()">@TextService.LogIn</a>
	</div>
</div>

@code {

	[Inject] private IRequestSender RequestSender { get; set; }
	[Inject] private INavigationService NavigationService { get; set; }
	[Inject] private ILoginService LoginService { get; set; }
	[Inject] private IStaticStateService StaticStateService { get; set; }
	[Inject] private IModalService ModalService { get; set; }
	[Inject] private ILocalStorageManagerService LocalStorageManagerService { get; set; }

	public RegisterRequestDto Request { get; set; }

	private string _email = string.Empty;
	private Task<bool?> _isEmailAvailableTask = Task.FromResult<bool?>(null);
	private string IsValidClassAttribute => (_isEmailAvailableTask.IsCompletedSuccessfully && (_isEmailAvailableTask.Result.HasValue && _isEmailAvailableTask.Result.Value) ? "form-control is-valid" : "form-control");

	private PasswordVisibilityUtility _passwordVisibilityUtility1 = new PasswordVisibilityUtility();
	private PasswordVisibilityUtility _passwordVisibilityUtility2 = new PasswordVisibilityUtility();

	private StudyGroupDto? _selecedFaculty;
	private StudyGroupDto? SelectedFaculty
	{
		get => _selecedFaculty;
		set
		{
			_selecedFaculty = value;
			Request.HomeFacultyId = value?.Id;
		}
	}

	protected override void OnInitialized()
	{
		base.OnInitialized();

		if (LoginService.IsAuthenticated)
			NavigationService.NavigateTo(PageRoutes.HomePage.BuildRoute());
	}

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		// Get the recent courses
		var recentCourses = await LocalStorageManagerService.GetRecentCourses();

		Request = new RegisterRequestDto(StaticStateService.LoginPageEmail, string.Empty, string.Empty, string.Empty, false, null, recentCourses);

		SelectedFaculty = StaticStateService.SelectedStudyGroup;
	}

	private bool _isBusy;

	public async Task Register()
	{
		// if he is busy, then do not do anything
		if (_isBusy)
		{
			return;
		}

		// Set and display as busy
		_isBusy = true;
		StateHasChanged();

		// Send the request
		var response = await RequestSender.SendRequestAsync(Request, () =>
		{
			_isBusy = false;
			StateHasChanged();
		});

		// Reset the email text in the static state storage
		StaticStateService.SetLoginPageEmail(string.Empty);

		// Navigate to the page about the requirement of confirming the email
		NavigationService.NavigateTo(PageRoutes.ConfirmEmailPage.BuildRoute(response.UserProfile.Email));
	}

	public async Task HandleSelectFaulty()
	{
		// Show the dialog
		var dialog = ModalService.Show<SelectStudyGroupModal>(TextService.SelectFacultyModal_Title);

		// Wait for the user to select his faculty
		var dialogResult = await dialog.Result;

		// If success
		if (!dialogResult.Cancelled)
		{
			// Then save the selected faculty
			SelectedFaculty = dialogResult.Data as StudyGroupDto;
		}
	}

	public void HandleResetSelectedFaculty() => SelectedFaculty = null;
}