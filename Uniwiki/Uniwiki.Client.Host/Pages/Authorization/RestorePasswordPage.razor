@page "/RestorePassword"
@using Uniwiki.Shared.RequestResponse.Authentication
@inherits Uniwiki.Client.Host.Shared.UniwikiComponentBase

<div class="container my-5">
	<div class="mx-auto card text-center shadow-lg" style="max-width: 25rem;">
		<div class="card-header h2 py-4 d-flex">
			<BackButtonComponent /> <span class="mx-auto">@TextService.RestorePasswordPage_Title</span><span class="mr-5"></span>
		</div>
		<div class="card-body text-center p-3 d-flex flex-column">
			<EditForm Model="@Request" OnValidSubmit="@RestorePassword">
				<MyFluentValidator></MyFluentValidator>
				<label for="inputEmail">@TextService.RestorePasswordPage_YourEmail</label>
				<InputText id="inputEmail" type="email" class="form-control" placeholder="@TextService.RestorePasswordPage_YourEmail" @bind-Value="Request.Email" />
				<ValidationMessage For="@(() => Request.Email)" />
				<BusyButtonComponent IsBusy="@_isBusy" Class="mt-3">
					<span>@TextService.RestorePasswordPage_RestorePassword</span>
				</BusyButtonComponent>
			</EditForm>
		</div>
	</div>
</div>

@code {

	[Inject] private INavigationService NavigationService { get; set; }
	[Inject] private IRequestSender RequestSender { get; set; }
	[Inject] private ILoginService LoginService { get; set; }

	public RestorePasswordRequestDto Request { get; set; }

	private bool _isBusy;

	public RestorePasswordPage()
	{
		Request = new RestorePasswordRequestDto(string.Empty);
	}

	protected override void OnInitialized()
	{
		base.OnInitialized();

		if (LoginService.IsAuthenticated)
			NavigationService.NavigateTo(PageRoutes.HomePage.BuildRoute());
	}

	public async Task RestorePassword()
	{
		if (_isBusy)
			return;
		_isBusy = true;

		var request = new RestorePasswordRequestDto(Request.Email);
		var response = await RequestSender.SendRequestAsync(request, () =>
		{
			_isBusy = false;
			StateHasChanged();
		});
		NavigationService.NavigateTo(PageRoutes.RestorePasswordRequestedPage.BuildRoute(response.Email));

	}


}